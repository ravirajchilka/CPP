Data types
==========
	For unsigned values append U to the number
	std::uint16_t somevar = 30U;

	Append F or f at the end of the number for floating values
	float value = 12.0F;

	auto keyword should be AAA meaning (Almost Always Auto)
	use auto keyword wherever its possible 
	DRY (Don't repeat yourself)

	constexpr vs const
	const variables are runtime and constexpr can be runtime or compiletime
	Compile time evaluation and execution is faster than runtime
	Its not guaranteed though by constexpr wheather it would be compiletime or
	runtime for that reason use static keyword whenever constexpr declared. 
	All the functions can be declared with constexpr keyword.
	Function arguments type can't be constexpr

	Use namespaces wherever its needed for better separation. A static keyword
	can be added to function if its not meant to be exported. In modern C++ approach
	anonymous namespace can wrap function without needing of static keyword. Named
	namespaces functions are exported to the outside

	C styled arrays have constant length. Always use C++ styled arrays in CPP coding.
	Use std::array, its a static array, the length can't be modified during runtime. Always use size_t 
	data type. Use template and declare N so that function becomes reusable for any length of array.
	

Functions	
=========	
	When passing arrays as an argument to a function its always better to pass &(address) of array 
	otherwise function will create a local variable which may lead to memory wastage. Always pass it
	by reference.

	In a function argument if a constant value is passed and the argument data type is not defined 
	with const keyword then compilers throws error. Good practice is whenever you have rvalue,
	that is the value with no name or memory address, the function accepting the rvalue should have
	const declared argument. For example 
		std::uint16_t test(const std::uint16_t &num) {
    		return num;
		}
		test(70);


Pointers
========
	Wherever possible use references instead of pointer to pass in the functions

	Unique pointer is type of smart pointer and its used when we dont want to make multiple copies 
	of a pointer which points to same memory location. If there is no need of creating the copies of 
	a pointer then use Unique pointer. Also unlike C language pointer a Unique pointer calls destructor 
	once the function call is finished so no need of delete[] is required.

	Shared pointer can lead to cycle references if one pointer creates another pointer and vice versa.
	To overcome this issue use weak pointer along with shared pointer.
	
